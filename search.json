[{"path":"http://iamwangsiyu.com/LDATree/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 LDATree authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"http://iamwangsiyu.com/LDATree/articles/LDATree.html","id":"build-the-tree","dir":"Articles","previous_headings":"","what":"Build the Tree","title":"Introduction to LDATree","text":"Currently, LDATree offers two methods construct tree: first method utilizes direct-stopping rule, halting growth process specific conditions satisfied. second approach involves pruning: permits building larger tree, pruned using cross-validation.","code":"# mpg <- as.data.frame(ggplot2::mpg) # datX <- mpg[, -5] # All predictors without Y # response <- mpg[, 5] # we try to predict \"cyl\" (number of cylinders) #  # # Build a tree using direct-stopping rule # fit <- Treee(datX = datX, response = response, pruneMethod = \"pre\", verbose = FALSE) #  # # Build a tree using cross-validation # set.seed(443) # fitCV <- Treee(datX = datX, response = response, pruneMethod = \"post\", verbose = FALSE)"},{"path":"http://iamwangsiyu.com/LDATree/articles/LDATree.html","id":"plot-the-tree","dir":"Articles","previous_headings":"","what":"Plot the Tree","title":"Introduction to LDATree","text":"LDATree offers two plotting methods： can use plot directly view full tree diagram. check individual plot node interested , input (training) data specify node index.","code":""},{"path":"http://iamwangsiyu.com/LDATree/articles/LDATree.html","id":"overall-plot","dir":"Articles","previous_headings":"Plot the Tree","what":"Overall Plot","title":"Introduction to LDATree","text":"","code":"# View the overall tree # plot(fit) # Tips: Try clicking on the nodes..."},{"path":"http://iamwangsiyu.com/LDATree/articles/LDATree.html","id":"individual-plots","dir":"Articles","previous_headings":"Plot the Tree","what":"Individual Plots","title":"Introduction to LDATree","text":"","code":"# Three types of individual plots # # 1. Scatter plot on first two LD scores # plot(fit, datX = datX, response = response, node = 1) #  # # 2. Density plot on the first LD score # plot(fit, datX = datX, response = response, node = 3) #  # # 3. A message # plot(fit, datX = datX, response = response, node = 2)"},{"path":"http://iamwangsiyu.com/LDATree/articles/LDATree.html","id":"make-predictions","dir":"Articles","previous_headings":"","what":"Make Predictions","title":"Introduction to LDATree","text":"","code":"# Prediction only # predictions <- predict(fit, datX) # head(predictions) # A more informative prediction # predictions <- predict(fit, datX, type = \"all\") # head(predictions)"},{"path":"http://iamwangsiyu.com/LDATree/articles/LDATree.html","id":"missing-values","dir":"Articles","previous_headings":"","what":"Missing Values","title":"Introduction to LDATree","text":"missing values, need specify anything (unless want ); LDATree handle . default, fills missing numerical variables median adds missing flag. missing factor variables, assigns new level. options, please refer help(Treee).","code":"#  # datXmissing <- datX # for(i in 1:10) datXmissing[sample(234,20),i] <- NA # fitMissing <- Treee(datX = datXmissing, response = response, pruneMethod = \"post\", verbose = FALSE) # plot(fitMissing, datX = datXmissing, response = response, node = 1)"},{"path":"http://iamwangsiyu.com/LDATree/articles/LDATree.html","id":"ldagsvd","dir":"Articles","previous_headings":"","what":"LDA/GSVD","title":"Introduction to LDATree","text":"re-implement LDA/GSVD apply model fitting, -product ldaGSVD function. Feel free play see compares MASS::lda.","code":"# fitLDAgsvd <- ldaGSVD(datX = datX, response = response) # predictionsLDAgsvd <- predict(fitLDAgsvd, newdata = datX) # mean(predictionsLDAgsvd == response) # Training error"},{"path":"http://iamwangsiyu.com/LDATree/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Siyu Wang. Maintainer, author, copyright holder.","code":""},{"path":"http://iamwangsiyu.com/LDATree/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang S (2024). LDATree: Classification Trees Linear Discriminant Analysis Terminal Nodes. R package version 0.1.2.9001, http://iamwangsiyu.com/LDATree/, https://github.com/Moran79/LDATree.","code":"@Manual{,   title = {LDATree: Classification Trees with Linear Discriminant Analysis at Terminal Nodes},   author = {Siyu Wang},   year = {2024},   note = {R package version 0.1.2.9001, http://iamwangsiyu.com/LDATree/},   url = {https://github.com/Moran79/LDATree}, }"},{"path":"http://iamwangsiyu.com/LDATree/index.html","id":"ldatree-","dir":"","previous_headings":"","what":"Classification Trees with Linear Discriminant Analysis at Terminal Nodes","title":"Classification Trees with Linear Discriminant Analysis at Terminal Nodes","text":"LDATree R modeling package fitting classification trees. unfamiliar classification trees, tutorial traditional CART R implementation rpart.","code":""},{"path":"http://iamwangsiyu.com/LDATree/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Classification Trees with Linear Discriminant Analysis at Terminal Nodes","text":"Compared similar trees, LDATree sets apart following ways: applies idea LDA (Linear Discriminant Analysis) selecting variables, finding splits, fitting models terminal nodes. addresses certain limitations R implementation LDA (MASS::lda), handling missing values, dealing features samples, constant values within groups. Re-implement LDA using Generalized Singular Value Decomposition (GSVD), LDATree offers quick response, particularly large datasets. package also includes several visualization tools provide deeper insights data.","code":""},{"path":"http://iamwangsiyu.com/LDATree/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Classification Trees with Linear Discriminant Analysis at Terminal Nodes","text":"CRAN version outdated one 08/2023. Please stay tune latest version, released around 10/2024. Meanwhile, feel free try undocumented version bellow.","code":"install.packages(\"LDATree\") library(devtools) install_github('Moran79/LDATree')"},{"path":"http://iamwangsiyu.com/LDATree/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Classification Trees with Linear Discriminant Analysis at Terminal Nodes","text":"build LDATree: plot LDATree:    make predictions:","code":"library(LDATree) set.seed(443) diamonds <- as.data.frame(ggplot2::diamonds)[sample(53940, 2000),] datX <- diamonds[, -2] response <- diamonds[, 2] # we try to predict \"cut\" fit <- Treee(datX = datX, response = response, verbose = FALSE) # View the overall tree. plot(fit) # Three types of individual plots # 1. Scatter plot on first two LD scores plot(fit, datX = datX, response = response, node = 1) # 2. Density plot on the first LD score plot(fit, datX = datX, response = response, node = 3) # 3. A message plot(fit, datX = datX, response = response, node = 2) #> [1] \"Every observation in node 2 is predicted to be Fair\" # Prediction only. predictions <- predict(fit, datX) head(predictions) #> [1] \"Ideal\" \"Ideal\" \"Ideal\" \"Ideal\" \"Ideal\" \"Ideal\" # A more informative prediction predictions <- predict(fit, datX, type = \"all\") head(predictions) #>   response node         Fair        Good Very Good     Premium     Ideal #> 1    Ideal    6 4.362048e-03 0.062196349 0.2601145 0.056664046 0.6166630 #> 2    Ideal    6 1.082022e-04 0.006308281 0.1290079 0.079961227 0.7846144 #> 3    Ideal    6 7.226446e-03 0.077434549 0.2036148 0.023888946 0.6878352 #> 4    Ideal    6 1.695119e-02 0.115233616 0.1551836 0.008302145 0.7043295 #> 5    Ideal    6 4.923729e-05 0.004157352 0.1498265 0.187391975 0.6585749 #> 6    Ideal    6 4.827312e-03 0.061274797 0.1978061 0.027410359 0.7086815"},{"path":"http://iamwangsiyu.com/LDATree/index.html","id":"getting-help","dir":"","previous_headings":"","what":"Getting help","title":"Classification Trees with Linear Discriminant Analysis at Terminal Nodes","text":"encounter clear bug, please file issue minimal reproducible example GitHub","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/LDATree-package.html","id":null,"dir":"Reference","previous_headings":"","what":"LDATree: Classification Trees with Linear Discriminant Analysis at Terminal Nodes — LDATree-package","title":"LDATree: Classification Trees with Linear Discriminant Analysis at Terminal Nodes — LDATree-package","text":"classification tree method uses LDA (Linear Discriminant Analysis) variable selection, split determination, model fitting terminal nodes. automatically handles missing values offers visualization tools.","code":""},{"path":[]},{"path":"http://iamwangsiyu.com/LDATree/reference/LDATree-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"LDATree: Classification Trees with Linear Discriminant Analysis at Terminal Nodes — LDATree-package","text":"Maintainer: Siyu Wang swang739@wisc.edu (ORCID) [copyright holder]","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/Treee.html","id":null,"dir":"Reference","previous_headings":"","what":"Classification Trees with Uncorrelated Linear Discriminant Analysis Terminal Nodes — Treee","title":"Classification Trees with Uncorrelated Linear Discriminant Analysis Terminal Nodes — Treee","text":"function fits classification tree node Uncorrelated Linear Discriminant Analysis (ULDA) model. can also handle missing values perform downsampling. resulting tree can pruned either pre-pruning post-pruning methods.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/Treee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Classification Trees with Uncorrelated Linear Discriminant Analysis Terminal Nodes — Treee","text":"","code":"Treee(   datX,   response,   ldaType = c(\"forward\", \"all\"),   nodeModel = c(\"ULDA\", \"mode\"),   pruneMethod = c(\"pre\", \"post\"),   numberOfPruning = 10L,   maxTreeLevel = 20L,   minNodeSize = NULL,   pThreshold = NULL,   prior = NULL,   misClassCost = NULL,   missingMethod = c(\"medianFlag\", \"newLevel\"),   kSample = -1,   verbose = TRUE )"},{"path":"http://iamwangsiyu.com/LDATree/reference/Treee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Classification Trees with Uncorrelated Linear Discriminant Analysis Terminal Nodes — Treee","text":"datX data frame predictor variables. response vector response values corresponding datX. ldaType character string specifying type LDA use. Options \"forward\" forward ULDA \"\" full ULDA. Default \"forward\". nodeModel character string specifying type model used node. Options \"ULDA\" Uncorrelated LDA, \"mode\" predicting based frequent class. Default \"ULDA\". pruneMethod character string specifying pruning method. \"pre\" performs pre-pruning based p-value thresholds, \"post\" performs cross-validation-based post-pruning. Default \"pre\". numberOfPruning integer specifying number folds cross-validation post-pruning. Default 10. maxTreeLevel integer controlling maximum depth tree. Increasing value allows deeper trees nodes. Default 20. minNodeSize integer controlling minimum number samples required node. Setting higher value may lead earlier stopping smaller trees. specified, defaults one plus number response classes. pThreshold numeric value used threshold pre-pruning based p-values. Lower values result conservative trees. specified, defaults 0.01 pre-pruning 0.51 post-pruning. prior numeric vector prior probabilities class. NULL, prior automatically calculated data. misClassCost square matrix \\(C\\), element \\(C_{ij}\\) represents cost classifying observation class \\(\\) given truly belongs class \\(j\\). NULL, default matrix equal misclassification costs class pairs used. Default NULL. missingMethod character string specifying missing values handled. Options include 'mean', 'median', 'meanFlag', 'medianFlag' numerical variables, 'mode', 'modeFlag', 'newLevel' factor variables. 'Flag' options indicate whether missing flag added, 'newLevel' replaces missing values new factor level. kSample integer specifying number samples use downsampling tree construction. Set -1 disable downsampling. verbose logical value. TRUE, progress messages detailed output printed tree construction pruning. Default FALSE.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/Treee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Classification Trees with Uncorrelated Linear Discriminant Analysis Terminal Nodes — Treee","text":"object class Treee containing fitted tree, list nodes, object class TreeeNode. TreeeNode contains: currentIndex: node index tree. currentLevel: depth current node tree. idxRow, idxCol: Row column indices indicating part original data used node. currentLoss: training error node. accuracy: training accuracy node. stopInfo: Information node stopped growing. proportions: observed frequency class node. prior: (adjusted) class prior probabilities used ULDA mode prediction. misClassCost: misclassification cost matrix used node. parent: index parent node. children: vector indices node’s direct children. splitFun: splitting function used node. nodeModel: Indicates model fitted node ('ULDA' 'mode'). nodePredict: fitted model node, either ULDA object plurality class. alpha: p-value two-sample t-test used evaluate strength split. childrenTerminal: vector indices representing terminal nodes descendants node. childrenTerminalLoss: total training error accumulated nodes listed childrenTerminal.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/Treee.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Classification Trees with Uncorrelated Linear Discriminant Analysis Terminal Nodes — Treee","text":"Wang, S. (2024). New Forward Discriminant Analysis Framework Based Pillai's Trace ULDA. arXiv preprint arXiv:2409.03136. Available https://arxiv.org/abs/2409.03136.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/Treee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Classification Trees with Uncorrelated Linear Discriminant Analysis Terminal Nodes — Treee","text":"","code":"fit <- Treee(datX = iris[, -5], response = iris[, 5], verbose = FALSE) #> Error in getNumFlag(prior): data must be a data.frame # Use cross-validation to prune the tree fitCV <- Treee(datX = iris[, -5], response = iris[, 5], pruneMethod = \"post\", verbose = FALSE) #> Error in getNumFlag(prior): data must be a data.frame head(predict(fit, iris)) # prediction #> Error in eval(expr, envir, enclos): object 'fit' not found plot(fit) # plot the overall tree #> Error in eval(expr, envir, enclos): object 'fit' not found plot(fit, datX = iris[, -5], response = iris[, 5], node = 1) # plot a certain node #> Error in eval(expr, envir, enclos): object 'fit' not found"},{"path":"http://iamwangsiyu.com/LDATree/reference/plot.Treee.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a Decision Tree or Specific Node — plot.Treee","title":"Plot a Decision Tree or Specific Node — plot.Treee","text":"function visualizes either entire decision tree specific node within tree. tree displayed interactive network nodes edges, individual nodes scatter/density plots using ggplot2.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/plot.Treee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a Decision Tree or Specific Node — plot.Treee","text":"","code":"# S3 method for class 'Treee' plot(x, datX, response, node = -1, ...)"},{"path":"http://iamwangsiyu.com/LDATree/reference/plot.Treee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a Decision Tree or Specific Node — plot.Treee","text":"x fitted model object class Treee, typically result Treee() function. datX data frame predictor variables. Required plotting individual nodes. response vector response values. Required plotting individual nodes. node integer specifying node plot. node = -1, entire tree plotted. Default -1. ... Additional arguments passed plotting functions.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/plot.Treee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a Decision Tree or Specific Node — plot.Treee","text":"visNetwork interactive plot decision tree node = -1, ggplot2 object specific node plotted.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/plot.Treee.html","id":"overall-tree-structure","dir":"Reference","previous_headings":"","what":"Overall Tree Structure","title":"Plot a Decision Tree or Specific Node — plot.Treee","text":"full tree diagram displayed using visNetwork node specified (default -1). color represents common (plurality) class within node, size terminal node reflects relative sample size. node, fraction correctly predicted training samples total sample size node shown, along node index. Clicking node opens information panel additional details.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/plot.Treee.html","id":"individual-node-plot","dir":"Reference","previous_headings":"","what":"Individual Node Plot","title":"Plot a Decision Tree or Specific Node — plot.Treee","text":"plot specific node, must provide node index along original training predictors (datX) responses (response). scatter plot generated one discriminant score available, otherwise, density plot created. Samples projected onto linear discriminant score(s).","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/plot.Treee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a Decision Tree or Specific Node — plot.Treee","text":"","code":"fit <- Treee(datX = iris[, -5], response = iris[, 5], verbose = FALSE) #> Error in getNumFlag(prior): data must be a data.frame plot(fit) # plot the overall tree #> Error in eval(expr, envir, enclos): object 'fit' not found plot(fit, datX = iris, response = iris[, 5], node = 1) # plot a specific node #> Error in eval(expr, envir, enclos): object 'fit' not found"},{"path":"http://iamwangsiyu.com/LDATree/reference/predict.Treee.html","id":null,"dir":"Reference","previous_headings":"","what":"Predictions from a fitted Treee object — predict.Treee","title":"Predictions from a fitted Treee object — predict.Treee","text":"Generate predictions new data using fitted Treee model.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/predict.Treee.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predictions from a fitted Treee object — predict.Treee","text":"","code":"# S3 method for class 'Treee' predict(object, newdata, type = c(\"response\", \"prob\", \"all\"), ...)"},{"path":"http://iamwangsiyu.com/LDATree/reference/predict.Treee.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predictions from a fitted Treee object — predict.Treee","text":"object fitted model object class Treee, typically result Treee() function. newdata data frame containing predictor variables. Missing values allowed handled according fitted tree's method handling missing data. type character string specifying type prediction return. Options : 'response': returns predicted class observation (default). 'prob': returns data frame posterior probabilities class. '': returns data frame containing predicted classes, posterior probabilities, predicted node indices. ... Additional arguments passed methods.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/predict.Treee.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predictions from a fitted Treee object — predict.Treee","text":"Depending value type, function returns: type = 'response': character vector predicted class labels. type = 'prob': data frame posterior probabilities, class column. type = '': data frame containing predicted class labels, posterior probabilities, predicted node indices. Note: factor predictors, level present training data found newdata, treated missing handled according missingMethod specified fitted tree.","code":""},{"path":"http://iamwangsiyu.com/LDATree/reference/predict.Treee.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Predictions from a fitted Treee object — predict.Treee","text":"","code":"fit <- Treee(datX = iris[, -5], response = iris[, 5], verbose = FALSE) #> Error in getNumFlag(prior): data must be a data.frame head(predict(fit, iris)) # Predicted classes #> Error in eval(expr, envir, enclos): object 'fit' not found head(predict(fit, iris[, -5], type = \"prob\")) # Posterior probabilities #> Error in eval(expr, envir, enclos): object 'fit' not found head(predict(fit, iris[, -5], type = \"all\")) # Full details #> Error in eval(expr, envir, enclos): object 'fit' not found"},{"path":"http://iamwangsiyu.com/LDATree/news/index.html","id":"ldatree-012","dir":"Changelog","previous_headings":"","what":"LDATree 0.1.2","title":"LDATree 0.1.2","text":"CRAN release: 2023-08-25 Fixed one HTML plot vignette due CRAN check error flavor r-release-macos-x86_64. error message Pandoc required build R Markdown vignettes available. Please make sure installed.","code":""},{"path":"http://iamwangsiyu.com/LDATree/news/index.html","id":"ldatree-011","dir":"Changelog","previous_headings":"","what":"LDATree 0.1.1","title":"LDATree 0.1.1","text":"CRAN release: 2023-08-24 Fixed two examples functions due MKL error Additional issues. detects --bounds error one plots example.","code":""},{"path":"http://iamwangsiyu.com/LDATree/news/index.html","id":"ldatree-010","dir":"Changelog","previous_headings":"","what":"LDATree 0.1.0","title":"LDATree 0.1.0","text":"CRAN release: 2023-08-22 Initial CRAN submission.","code":""}]
